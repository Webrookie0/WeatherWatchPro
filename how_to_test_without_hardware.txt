# Testing the Weather Station Dashboard Without Hardware

If you don't have the ESP8266 hardware set up yet, you can still test the dashboard by sending simulated data to your server. Follow these steps:

## Option 1: Using cURL (Command Line)

You can use cURL to send test data that simulates what the ESP8266 would send:

1. Open a terminal or command prompt
2. Run the following command to send a test data point:

```bash
curl -X POST http://localhost:5000/api/weather \
  -H "Content-Type: application/json" \
  -d '{
    "device_id": "ESP8266-TEST",
    "temperature_dht": 24.5,
    "temperature_bmp": 24.2,
    "humidity": 55.5,
    "pressure": 1013.25,
    "signal_strength": -65,
    "uptime": "1 hour, 25 minutes"
  }'
```

3. Replace `http://localhost:5000` with your actual server URL if it's different
4. Run this command multiple times (with slightly different values) to create historical data

## Option 2: Using a Script to Generate Regular Data

You can use this simple Node.js script to simulate an ESP8266 sending data at regular intervals:

1. Create a file named `simulate_esp8266.js`
2. Copy the following code:

```javascript
const fetch = require('node-fetch');

// Configuration
const SERVER_URL = 'http://localhost:5000/api/weather';
const INTERVAL_SECONDS = 30;
const DEVICE_ID = 'ESP8266-SIM';

// Time tracking
let uptime = 0;

// Function to generate random sensor readings with slight variations
function generateReadings() {
  // Base values
  const baseTempDHT = 23.5;
  const baseTempBMP = 23.2;
  const baseHumidity = 55;
  const basePressure = 1013.25;
  
  // Add small random variations
  return {
    temperature_dht: baseTempDHT + (Math.random() * 2 - 1),
    temperature_bmp: baseTempBMP + (Math.random() * 2 - 1),
    humidity: baseHumidity + (Math.random() * 10 - 5),
    pressure: basePressure + (Math.random() * 2 - 1),
  };
}

// Format uptime
function formatUptime(seconds) {
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  const days = Math.floor(hours / 24);
  
  if (days > 0) {
    return `${days} days, ${hours % 24} hours`;
  } else if (hours > 0) {
    return `${hours} hours, ${minutes % 60} minutes`;
  } else {
    return `${minutes} minutes, ${seconds % 60} seconds`;
  }
}

// Function to send data to the server
async function sendData() {
  try {
    // Generate sensor readings
    const readings = generateReadings();
    
    // Prepare data payload
    const data = {
      device_id: DEVICE_ID,
      ...readings,
      signal_strength: -60 - Math.floor(Math.random() * 30),
      uptime: formatUptime(uptime)
    };
    
    console.log('Sending data:', data);
    
    // Send data to server
    const response = await fetch(SERVER_URL, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(data),
    });
    
    const result = await response.json();
    console.log('Server response:', response.status, result);
  } catch (error) {
    console.error('Error sending data:', error);
  }
  
  // Increment uptime
  uptime += INTERVAL_SECONDS;
}

// Send data immediately, then at regular intervals
console.log('Starting ESP8266 simulator...');
sendData();
setInterval(sendData, INTERVAL_SECONDS * 1000);
```

3. Install the required package: `npm install node-fetch`
4. Update the `SERVER_URL` in the script with your actual server URL
5. Run the script: `node simulate_esp8266.js`
6. The script will send data every 30 seconds, just like a real ESP8266 would

## Option 3: Using Postman or Similar API Testing Tools

1. Open Postman (or another API testing tool)
2. Create a new POST request to `http://localhost:5000/api/weather`
3. In the Headers tab, add:
   - Key: `Content-Type`
   - Value: `application/json`
4. In the Body tab:
   - Select "raw" and "JSON"
   - Enter test data:
```json
{
  "device_id": "ESP8266-TEST",
  "temperature_dht": 24.5,
  "temperature_bmp": 24.2,
  "humidity": 55.5,
  "pressure": 1013.25,
  "signal_strength": -65,
  "uptime": "1 hour, 25 minutes"
}
```
5. Click Send to submit the data

## Viewing the Results

After sending test data using any of the methods above:

1. Go to your dashboard URL (http://localhost:5000 or your deployed URL)
2. The dashboard should display the most recent data point
3. Send multiple data points to see the historical charts populate

Remember that the dashboard auto-refreshes every 30 seconds, so you should see updates without needing to manually refresh the page.